import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of org.freedesktop.NetworkManager at /org/freedesktop/NetworkManager/AccessPoint/598
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
                      "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<!-- GDBus 2.56.4 -->
<node>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="out"/>
    </method>
    <method name="GetAll">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="a{sv}" name="properties" direction="out"/>
    </method>
    <method name="Set">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="in"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="s" name="interface_name"/>
      <arg type="a{sv}" name="changed_properties"/>
      <arg type="as" name="invalidated_properties"/>
    </signal>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" name="xml_data" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping"/>
    <method name="GetMachineId">
      <arg type="s" name="machine_uuid" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.NetworkManager.AccessPoint">
    <signal name="PropertiesChanged">
      <arg type="a{sv}" name="properties"/>
    </signal>
    <property type="u" name="Flags" access="read"/>
    <property type="u" name="WpaFlags" access="read"/>
    <property type="u" name="RsnFlags" access="read"/>
    <property type="ay" name="Ssid" access="read"/>
    <property type="u" name="Frequency" access="read"/>
    <property type="s" name="HwAddress" access="read"/>
    <property type="u" name="Mode" access="read"/>
    <property type="u" name="MaxBitrate" access="read"/>
    <property type="y" name="Strength" access="read"/>
    <property type="i" name="LastSeen" access="read"/>
  </interface>
</node>
`;

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/AccessPoint/598
 * Interface: org.freedesktop.NetworkManager.AccessPoint
 */
export class AccessPoint extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.AccessPoint';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/AccessPoint/598", xml: string = XMLObjectData): Promise<AccessPoint> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new AccessPoint(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.AccessPoint');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Flags', signature: 'u', access: ACCESS_READ })
    public Flags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Flags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'WpaFlags', signature: 'u', access: ACCESS_READ })
    public WpaFlags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'WpaFlags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'RsnFlags', signature: 'u', access: ACCESS_READ })
    public RsnFlags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'RsnFlags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ssid', signature: 'ay', access: ACCESS_READ })
    public Ssid(): Promise<Buffer> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ssid').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Frequency', signature: 'u', access: ACCESS_READ })
    public Frequency(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Frequency').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    public HwAddress(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'HwAddress').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Mode', signature: 'u', access: ACCESS_READ })
    public Mode(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Mode').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'MaxBitrate', signature: 'u', access: ACCESS_READ })
    public MaxBitrate(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'MaxBitrate').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Strength', signature: 'y', access: ACCESS_READ })
    public Strength(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Strength').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'LastSeen', signature: 'i', access: ACCESS_READ })
    public LastSeen(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LastSeen').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

}
/***** Signals for org.freedesktop.NetworkManager.AccessPoint *****/
export declare interface AccessPoint {
    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

