import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/*
 * Interface: org.freedesktop.NetworkManager.Device
 */
export class Device extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Device';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string, xml?: string): Promise<Device> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new Device(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Device');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Udi', signature: 's', access: ACCESS_READ })
    public Udi(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Udi').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Interface', signature: 's', access: ACCESS_READ })
    public Interface(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Interface').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'IpInterface', signature: 's', access: ACCESS_READ })
    public IpInterface(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'IpInterface').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Driver', signature: 's', access: ACCESS_READ })
    public Driver(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Driver').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'DriverVersion', signature: 's', access: ACCESS_READ })
    public DriverVersion(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DriverVersion').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'FirmwareVersion', signature: 's', access: ACCESS_READ })
    public FirmwareVersion(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'FirmwareVersion').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Capabilities', signature: 'u', access: ACCESS_READ })
    public Capabilities(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Capabilities').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip4Address', signature: 'u', access: ACCESS_READ })
    public Ip4Address(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip4Address').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'State', signature: 'u', access: ACCESS_READ })
    public State(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'State').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'StateReason', signature: '(uu)', access: ACCESS_READ })
    public StateReason(): Promise</* (uu) */ any[]> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'StateReason').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'ActiveConnection', signature: 'o', access: ACCESS_READ })
    public ActiveConnection(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ActiveConnection').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip4Config', signature: 'o', access: ACCESS_READ })
    public Ip4Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip4Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Dhcp4Config', signature: 'o', access: ACCESS_READ })
    public Dhcp4Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Dhcp4Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip6Config', signature: 'o', access: ACCESS_READ })
    public Ip6Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip6Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Dhcp6Config', signature: 'o', access: ACCESS_READ })
    public Dhcp6Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Dhcp6Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Managed', signature: 'b', access: ACCESS_READWRITE })
    public Managed(): Promise<boolean>;
    public Managed(value: boolean): Promise<void>;
    public Managed(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Managed', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Managed').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Autoconnect', signature: 'b', access: ACCESS_READWRITE })
    public Autoconnect(): Promise<boolean>;
    public Autoconnect(value: boolean): Promise<void>;
    public Autoconnect(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Autoconnect', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Autoconnect').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'FirmwareMissing', signature: 'b', access: ACCESS_READ })
    public FirmwareMissing(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'FirmwareMissing').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'NmPluginMissing', signature: 'b', access: ACCESS_READ })
    public NmPluginMissing(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'NmPluginMissing').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'DeviceType', signature: 'u', access: ACCESS_READ })
    public DeviceType(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DeviceType').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'AvailableConnections', signature: 'ao', access: ACCESS_READ })
    public AvailableConnections(): Promise<Array<DBus.ObjectPath>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AvailableConnections').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'PhysicalPortId', signature: 's', access: ACCESS_READ })
    public PhysicalPortId(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'PhysicalPortId').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Mtu', signature: 'u', access: ACCESS_READ })
    public Mtu(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Mtu').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Metered', signature: 'u', access: ACCESS_READ })
    public Metered(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Metered').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'LldpNeighbors', signature: 'aa{sv}', access: ACCESS_READ })
    public LldpNeighbors(): Promise<Array<{[key: string]: DBus.Variant}>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LldpNeighbors').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Real', signature: 'b', access: ACCESS_READ })
    public Real(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Real').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'Reapply', inSignature: 'a{sa{sv}}tu', outSignature: '' })
    public Reapply(connection: /* a{sa{sv}} */ {[key:string]: any}, version_id: BigInt, flags: number): Promise<void> {
        return this.thisDBusInterface.Reapply(connection, version_id, flags);
    }

    //@method({ name: 'GetAppliedConnection', inSignature: 'u', outSignature: 'a{sa{sv}}t' })
    public GetAppliedConnection(flags: number, ): Promise<any> {
        return this.thisDBusInterface.GetAppliedConnection(flags, );
    }

    //@method({ name: 'Disconnect', inSignature: '', outSignature: '' })
    public Disconnect(): Promise<void> {
        return this.thisDBusInterface.Disconnect();
    }

    //@method({ name: 'Delete', inSignature: '', outSignature: '' })
    public Delete(): Promise<void> {
        return this.thisDBusInterface.Delete();
    }

}
/***** Signals for org.freedesktop.NetworkManager.Device *****/
export declare interface Device {
    //@signal({ name: 'StateChanged', signature: 'uuu' })
    on(evt: "StateChanged", cb: (new_state: number, old_state: number, reason: number) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

