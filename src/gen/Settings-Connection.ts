import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings/*
 * Interface: org.freedesktop.NetworkManager.Settings.Connection
 */
export class SettingsConnection extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Settings.Connection';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string, xml?: string): Promise<SettingsConnection> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new SettingsConnection(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Settings.Connection');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Unsaved', signature: 'b', access: ACCESS_READ })
    public Unsaved(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Unsaved').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'Update', inSignature: 'a{sa{sv}}', outSignature: '' })
    public Update(properties: /* a{sa{sv}} */ {[key:string]: any}): Promise<void> {
        return this.thisDBusInterface.Update(properties);
    }

    //@method({ name: 'UpdateUnsaved', inSignature: 'a{sa{sv}}', outSignature: '' })
    public UpdateUnsaved(properties: /* a{sa{sv}} */ {[key:string]: any}): Promise<void> {
        return this.thisDBusInterface.UpdateUnsaved(properties);
    }

    //@method({ name: 'Delete', inSignature: '', outSignature: '' })
    public Delete(): Promise<void> {
        return this.thisDBusInterface.Delete();
    }

    //@method({ name: 'GetSettings', inSignature: '', outSignature: 'a{sa{sv}}' })
    public GetSettings(): Promise</* a{sa{sv}} */ {[key:string]: any}> {
        return this.thisDBusInterface.GetSettings();
    }

    //@method({ name: 'GetSecrets', inSignature: 's', outSignature: 'a{sa{sv}}' })
    public GetSecrets(setting_name: string, ): Promise</* a{sa{sv}} */ {[key:string]: any}> {
        return this.thisDBusInterface.GetSecrets(setting_name, );
    }

    //@method({ name: 'ClearSecrets', inSignature: '', outSignature: '' })
    public ClearSecrets(): Promise<void> {
        return this.thisDBusInterface.ClearSecrets();
    }

    //@method({ name: 'Save', inSignature: '', outSignature: '' })
    public Save(): Promise<void> {
        return this.thisDBusInterface.Save();
    }

    //@method({ name: 'Update2', inSignature: 'a{sa{sv}}ua{sv}', outSignature: 'a{sv}' })
    public Update2(settings: /* a{sa{sv}} */ {[key:string]: any}, flags: number, args: {[key: string]: DBus.Variant}, ): Promise<{[key: string]: DBus.Variant}> {
        return this.thisDBusInterface.Update2(settings, flags, args, );
    }

}
/***** Signals for org.freedesktop.NetworkManager.Settings.Connection *****/
export declare interface SettingsConnection {
    //@signal({ name: 'Updated', signature: '' })
    on(evt: "Updated", cb: () => void): this;
    //@signal({ name: 'Removed', signature: '' })
    on(evt: "Removed", cb: () => void): this;
    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

